%% fetch
arrayBuffer: lab=https://cors-anywhere.herokuapp.com/https://github.com/schitaytesami/lab/archive/master.zip
%% js
var dataset_urls = ['https://cors-anywhere.herokuapp.com/https://github.com/schitaytesami/lab/releases/download/data-v2/RU_2018-03-18_president.tsv.gz'];

var open_url_binary = (url, then) => fetch(url).then(x => x.arrayBuffer()).then(then);
%% py
import micropip; micropip.install('pycountry')
%% py
import pycountry
import gzip, csv, time

import os, sys, io, zipfile
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import js
if not os.path.exists('lab-master'):
    zipfile.ZipFile(io.BytesIO(js.lab)).extractall()
    sys.path.append('lab-master')
import election_data
import square
import bubbles
import history
import historytraj

class Figure(object):
	def __init__(self, name, figsize = None):
		self.name = name
		self.figsize = figsize
	def __enter__(self):
		plt.figure(self.name, figsize = self.figsize)
		plt.clf()
	def __exit__(self, *args):
		plt.show()

def reinit_select(id, options, onchange):
	value_text = lambda o: o if isinstance(o, tuple) else (o, o)
	select = js.document.getElementById(id)
	while len(select.options) > 0:
		select.options.remove(0)
	for value, innerText in map(value_text, options):
		option = js.document.createElement('option')
		option.value = value
		option.innerText = innerText
		select.options.add(option)
	select.onchange = lambda event: onchange(event.target.value)
	onchange(value_text(options[0])[0])
%% md
<h1>Select a dataset</h1>
<select id="datasets" style="width:100%"></select>
<select id="regions"  style="width:100%"></select>
<h1>Voting result and turnout</h1>
%% py
with Figure('square', figsize=(12, 12)): pass
%% md
<h1>Voting result and turnout (dynamics)</h1>
%% py
with Figure('history', figsize=(12, 4)): pass
%% md
<h1>Sorted voting stations</h1>
%% py
with Figure('bubbles', figsize=(12, 12)): pass
%% md
<h1>Turnout trajectories</h1>
%% py
with Figure('historytraj', figsize=(12, 8)): pass
%% py
def format_dataset_name(dataset_url):
	strip_extension = lambda filename, exts = ['.tsv.gz']: ([filename[:-len(ext)] for ext in exts if filename.endswith(ext)] + [filename])[0]
	electoral_id = election_data.electoral_id(strip_extension(os.path.basename(dataset_url)))
	country_name = pycountry.countries.get(alpha_2 = electoral_id['region_code']).name
	return f'{electoral_id["date"]} - {country_name}, {electoral_id["election_name"]}'

def ondatasetloaded(bytes):
	global D, R
	tic = time.time()
	D = election_data.load(gzip.open(io.BytesIO(bytes), 'rt'))
	print('Data loading', time.time() - tic)
	R = election_data.regions(D)
	reinit_select('regions', [('', 'Country')] + list(sorted(R.items(), key = lambda t: t[1])), plot)

def ondatasetchanged(dataset_name):
	js.open_url_binary(datasets[dataset_name], ondatasetloaded)

def plot(region_code):
	#matplotlib.rcParams['figure.dpi'] = 50

	D_ = election_data.filter(D, region_code = region_code)
	region_name = R[region_code] if region_code else 'Country'
	
	with Figure('square'):
		square.plot(D_, title = region_name)

	with Figure('history'):
		history.plot(D_, title = region_name)

	with Figure('bubbles'):
		if region_code:
			bubbles.plot(D_, title = region_name)

	with Figure('historytraj'):
		if region_code:
			historytraj.plot(D_, title = region_name)

datasets = {format_dataset_name(url) : url for url in js.dataset_urls}
D, R = None, None

reinit_select('datasets', sorted(datasets), ondatasetchanged)
